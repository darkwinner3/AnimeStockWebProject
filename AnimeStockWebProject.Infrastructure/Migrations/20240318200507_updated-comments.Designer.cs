// <auto-generated />
using System;
using AnimeStockWebProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeStockWebProject.Infrastructure.Migrations
{
    [DbContext(typeof(AnimeStockDbContext))]
    [Migration("20240318200507_updated-comments")]
    partial class updatedcomments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BookTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<int>("Pages")
                        .HasMaxLength(10000)
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrintType")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("BookTypeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Koushi Tachibana",
                            BookTypeId = 1,
                            Description = "April 10. The first day of school. Shido Itsuka is rudely awoken by his personal alarm clock—his little sister. It’s shaping up to be another typical day…well, as typical as it gets on a planet plagued by massive spatial quakes. Little does Shido know, however, his life is about to take a sudden turn when he encounters the source of this destructive phenomenon—a girl his age, apparently known as a Spirit. Turns out, there are only two ways he can stop her from unleashing hell on the world: Eliminate her by force or placate her…by taking her out on a date and making her fall in love with him!",
                            Illustrator = "Tsunako",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 176,
                            Price = 12.23m,
                            PrintType = 1,
                            Publisher = "Yen On",
                            Quantity = 7,
                            ReleaseDate = new DateTime(2021, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Date A Live, Vol. 1"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Koushi Tachibana",
                            BookTypeId = 1,
                            Description = "Things have only gotten stranger for Shido ever since Tohka transferred to his school. These days, his life teeters between heaven and hell, and the forecast today points toward the latter. He’s already been caught in the line of fire between Tohka and Origami, and a sudden downpour leaves him sopping wet. Just his luck. Lately, it seems the only place he can catch a break is in the comfort of his own home. That’s all about to change, however, when a new “training” regimen calls for him to live with Tohka—and while Shido is at his most vulnerable, a second Spirit emerges from the storm…",
                            Illustrator = "Tsunako",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 184,
                            Price = 11.34m,
                            PrintType = 1,
                            Publisher = "Yen On",
                            Quantity = 35,
                            ReleaseDate = new DateTime(2021, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Date A Live, Vol. 2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Yuri Kitayama",
                            BookTypeId = 1,
                            Description = "Rio and Sora journey to the site of Saint Erica’s summoning to find clues about the transcendent rules. As Rio walks in the Saint’s footsteps, more questions arise about the power that the heroes wield.\r\n\r\nMeanwhile, the four heroes gather at the Galarc Castle, but Sendo Takahisa refuses to train with the others and sets out on his own lonely path to repair his relationship with Miharu. After all, she’s forgiven Aki... So why not him? Will the actions of one pining hero distort the very fabric of the world itself?",
                            Illustrator = "Riv",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 223,
                            Price = 6.54m,
                            PrintType = 2,
                            Publisher = "J-Novel Club",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Seirei Gensouki: Spirit Chronicles Volume 23"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Rifujin na Magonote",
                            BookTypeId = 1,
                            Description = "Kicked out by his family and wandering the streets, an unemployed 34-year-old shut-in thinks he’s hit rock-bottom—just as he’s hit and killed by a speeding truck! Awakening to find himself reborn as an infant in a world of swords and sorcery, but with the memories of his first life intact, Rudeus Greyrat is determined not to repeat his past mistakes. He’s going to make the most of this reincarnation as he sets off on the adventure of a second lifetime!",
                            Illustrator = "Shirotaka",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 266,
                            Price = 7.12m,
                            PrintType = 2,
                            Publisher = "Seven Seas Entertainment, Seven Seas Siren",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2019, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mushoku Tensei: Jobless Reincarnation, Vol. 1"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Rifujin Na Magonote",
                            BookTypeId = 2,
                            Description = "An unemployed otaku has just reached the lowest point in his life. He wants nothing more than the ability to start over, but just as he thinks it may be possible...he gets hit by a truck and dies! Shockingly, he finds himself reborn into an infant’s body in a strange new world of swords and magic. His identity now is Rudeus Greyrat, yet he still retains the memories of his previous life. Reborn into a new family, Rudeus makes use of his past experiences to forge ahead in this fantasy world as a true prodigy, gifted with maturity beyond his years and a natural born talent for magic. With swords instead of chopsticks, and spell books instead of the internet, can Rudeus redeem himself in this wondrous yet dangerous land?",
                            Illustrator = "Fujikawa Yuka",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 180,
                            Price = 10.23m,
                            PrintType = 1,
                            Publisher = "Seven Seas",
                            Quantity = 13,
                            ReleaseDate = new DateTime(2015, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mushoku Tensei: Jobless Reincarnation, Vol. 1"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Tatsuki Fujimoto",
                            BookTypeId = 2,
                            Description = "Denji was a small-time devil hunter just trying to survive in a harsh world. After being killed on a job, he is revived by his pet devil Pochita and becomes something new and dangerous—Chainsaw Man! Denji is desperate to tell the world that he’s Chainsaw Man, but is he competent enough to pull off a proper reveal? Meanwhile, Asa has made a friend! But this new friendship may be hiding a dark secret.",
                            Illustrator = "Tatsuki Fujimoto",
                            IsDeleted = false,
                            IsFavorite = false,
                            Pages = 184,
                            Price = 9.76m,
                            PrintType = 1,
                            Publisher = "VIZ Media LLC",
                            Quantity = 53,
                            ReleaseDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Chainsaw Man, Vol. 13"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.BooksTags", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            TagId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 1,
                            TagId = 15,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 15,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 2,
                            TagId = 16,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 21,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 3,
                            TagId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 21,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 4,
                            TagId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 21,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 5,
                            TagId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 15,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 17,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 13,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            BookId = 6,
                            TagId = 1,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.BookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("BookTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Light Novel"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Manga"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedDate = new DateTime(2024, 3, 18, 22, 5, 7, 418, DateTimeKind.Local).AddTicks(6450),
                            Description = "Test Comment",
                            GameId = 1,
                            IsDeleted = false,
                            UserId = new Guid("b9a4d407-7518-4aea-a72d-b94c7e389b70"),
                            UserName = "Test User"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedDate = new DateTime(2024, 3, 18, 22, 5, 7, 418, DateTimeKind.Local).AddTicks(6458),
                            Description = "Test Comment",
                            GameId = 2,
                            IsDeleted = false,
                            UserId = new Guid("b9a4d407-7518-4aea-a72d-b94c7e389b70"),
                            UserName = "Test User"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedDate = new DateTime(2024, 3, 18, 22, 5, 7, 418, DateTimeKind.Local).AddTicks(6460),
                            Description = "Test Comment",
                            GameId = 3,
                            IsDeleted = false,
                            UserId = new Guid("b9a4d407-7518-4aea-a72d-b94c7e389b70"),
                            UserName = "Test User"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedDate = new DateTime(2024, 3, 18, 22, 5, 7, 418, DateTimeKind.Local).AddTicks(6461),
                            Description = "Test Comment",
                            GameId = 4,
                            IsDeleted = false,
                            UserId = new Guid("b9a4d407-7518-4aea-a72d-b94c7e389b70"),
                            UserName = "Test User"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.FavoriteProducts", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId", "GameId");

                    b.HasIndex("BookId");

                    b.HasIndex("GameId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrintType")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("platformType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This story takes place three years after the events of the previous game “Atelier Ryza: Ever Darkness & the Secret Hideout,” and depicts the reunion of Ryza and her friends, who go through new encounters and goodbyes to discover a true priceless treasure.",
                            Developer = "KOEI TECMO GAMES CO., LTD.",
                            Name = "Atelier Ryza 2: Lost Legends & the Secret Fairy",
                            Price = 59.99m,
                            PrintType = 2,
                            Publisher = "KOEI TECMO GAMES CO., LTD.",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2021, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            platformType = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "STEINS;GATE follows a rag-tag band of tech-savvy young students who discover the means of changing the past via mail, using a modified microwave. Their experiments into how far they can go with their discovery begin to spiral out of control as they become entangled in a conspiracy surrounding SERN, the organisation behind the Large Hadron Collider, and John Titor who claims to be from a dystopian future.",
                            Developer = "MAGES. Inc.",
                            Name = "STEINS;GATE",
                            Price = 26.99m,
                            PrintType = 2,
                            Publisher = "Spike Chunsoft Co., Ltd.",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2016, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            platformType = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Final FANTASY VII remake intergrade is an enhanced and expanded version of the critically acclaimed and award-winning final FANTASY VII remake for the PlayStation 5. Final FANTASY VII remake intergrade comes bundled with the brand-new episode featuring yuffie as the main character which introduces an exhilarating new story Arc, and numerous gameplay additions for players to enjoy. The world has fallen under the control of the Shinra electric power company, a shadowy Corporation controlling the planet's very life force as Mako energy. In the sprawling city of Midgar, an anti-shinra organization calling themselves Avalanche have stepped up their resistance. Cloud strife, a former member of shinra's Elite soldier unit now turned mercenary, lends his aid to the group, Unaware of the epic consequences that await him. The new episode featuring yuffie is a brand-new adventure in the world of FINAL FANTASY VII remake intergrade. Play as wutai Ninja yuffie kisaragi as she infiltrates midgar and conspiracies with Avalanche HQ to steal the ultimate materia from the Shinra electric power company. Play alongside new characters and enjoy an expanded gameplay experience featuring multiple new combat and gameplay additions. This adventure brings new perspective to the final FANTASY VII remake story that cannot be missed.",
                            Developer = "Square Enix",
                            Name = "FINAL FANTASY VII REMAKE INTERGRADE",
                            Price = 35.99m,
                            PrintType = 1,
                            Publisher = "Square Enix",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            platformType = 0
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Little Witch Nobeta is a 3D action shooting game. Players will explore ancient, unknown castles and use different magic elements to fight against the soul!\r\nThe game uses a comfortable Japanese art style, but the battles are quite challenging despite its cute looks. Underestimating your foes will lead to troublesome encounters. You must discover enemies' weaknesses and learn the precise time to dodge attacks in order to gain the advantage in combat.",
                            Developer = "Pupuya Games, SimonCreative, Justdan",
                            Name = "Little Witch Nobeta",
                            Price = 34.00m,
                            PrintType = 1,
                            Publisher = "Pupuya Games",
                            Quantity = 0,
                            ReleaseDate = new DateTime(2022, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            platformType = 3
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.GamesGenres", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GenreId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 1,
                            GenreId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 1,
                            GenreId = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 1,
                            GenreId = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 1,
                            GenreId = 15,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 3,
                            GenreId = 16,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 4,
                            GenreId = 16,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 4,
                            GenreId = 14,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 4,
                            GenreId = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            GameId = 4,
                            GenreId = 7,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Visual Novel"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Dating Sim"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "JRPG"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Party-Based RPG"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Interactive Fiction"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Story Rich"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Psychological Horror"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Multiplayer"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Singleplayer"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Open World"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Fantasy"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GameId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 1(Light Novel)/cover/picture1.png"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 1(Light Novel)/picture2.png"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 1(Light Novel)/picture3.png"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 2(Light Novel)/cover/Picture_1.png"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 2,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 2(Light Novel)/Picture_2.png"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 2,
                            IsDeleted = false,
                            Path = "/img/Books/Date a Live Vol 2(Light Novel)/Picture_3.png"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 3,
                            IsDeleted = false,
                            Path = "/img/Books/Spirit Chronicles Vol 23(Light Nove)/cover/picture1.png"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 3,
                            IsDeleted = false,
                            Path = "/img/Books/Spirit Chronicles Vol 23(Light Nove)/picture2.png"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 3,
                            IsDeleted = false,
                            Path = "/img/Books/Spirit Chronicles Vol 23(Light Nove)/picture3.png"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 4,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Light Novel)/cover/picture 1.png"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 4,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Light Novel)/picture 2.png"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 4,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Light Novel)/picture 3.png"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 5,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Manga)/cover/81vgliRXgRL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 5,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Manga)/91yoqb7q5nL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 5,
                            IsDeleted = false,
                            Path = "/img/Books/Mushoku Tensei Vol 1 (Manga)/91yoqb7q5nL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 6,
                            IsDeleted = false,
                            Path = "/img/Books/Chainsaw Man, Vol. 13(Manga)/8194kTgN5iL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 17,
                            BookId = 6,
                            IsDeleted = false,
                            Path = "/img/Books/Chainsaw Man, Vol. 13(Manga)/cover/81WO4SsaNzL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 18,
                            GameId = 1,
                            IsDeleted = false,
                            Path = "/img/Games/Atelier Ryza 2/MV5BMTAxMDQzNDMtMjFkMC00NWNmLWE0NjItZDdkMWNjYmZkNjhlXkEyXkFqcGdeQXVyNzgxNDk0NTI@._V1_.jpg"
                        },
                        new
                        {
                            Id = 19,
                            GameId = 1,
                            IsDeleted = false,
                            Path = "/img/Games/Atelier Ryza 2/ss_38608a834caa5243f66945693ccc1eddee35942b.1920x1080.jpg"
                        },
                        new
                        {
                            Id = 20,
                            GameId = 1,
                            IsDeleted = false,
                            Path = "/img/Games/Atelier Ryza 2/ss_a0d278df03b540c0f21d2cae130ca30b296353ca.1920x1080.jpg"
                        },
                        new
                        {
                            Id = 21,
                            GameId = 1,
                            IsDeleted = false,
                            Path = "/img/Games/Atelier Ryza 2/ss_e6b1fd3eb46f1ea035b758c991bda2f5e15673c4.1920x1080.jpg"
                        },
                        new
                        {
                            Id = 22,
                            GameId = 2,
                            IsDeleted = false,
                            Path = "/img/Games/STEINS GATE/2611526-untitled.png"
                        },
                        new
                        {
                            Id = 23,
                            GameId = 2,
                            IsDeleted = false,
                            Path = "/img/Games/ss_18e33276a72437c7728c969fe079e7bda6b7fb08.1920x1080.png"
                        },
                        new
                        {
                            Id = 24,
                            GameId = 2,
                            IsDeleted = false,
                            Path = "/img/Games/STEINS GATE/ss_48523dbba66bc7ea79c8bc46eabaee6190e005e9.1920x1080.png"
                        },
                        new
                        {
                            Id = 25,
                            GameId = 2,
                            IsDeleted = false,
                            Path = "/img/Games/STEINS GATE/ss_56d0a07b2ca57c72eb9c74ca918d49e3cf7a06a6.1920x1080.png"
                        },
                        new
                        {
                            Id = 26,
                            GameId = 3,
                            IsDeleted = false,
                            Path = "/img/Games/FINAL FANTASY VII REMAKE INTERGRADE/71d7tEoKY6L._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 27,
                            GameId = 3,
                            IsDeleted = false,
                            Path = "/img/Games/FINAL FANTASY VII REMAKE INTERGRADE/71SUTICB69L._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 28,
                            GameId = 3,
                            IsDeleted = false,
                            Path = "/img/Games/FINAL FANTASY VII REMAKE INTERGRADE/81VGg56E0zL._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 29,
                            GameId = 3,
                            IsDeleted = false,
                            Path = "/img/Games/FINAL FANTASY VII REMAKE INTERGRADE/81W8CAno24L._SL1500_.jpg"
                        },
                        new
                        {
                            Id = 30,
                            GameId = 4,
                            IsDeleted = false,
                            Path = "/img/Games/Little Witch Nobeta/71+q7XyABPL._AC_SL1500_.jpg"
                        },
                        new
                        {
                            Id = 31,
                            GameId = 4,
                            IsDeleted = false,
                            Path = "/img/Games/Little Witch Nobeta/71rB0zyXdVL._AC_SL1500_.jpg"
                        },
                        new
                        {
                            Id = 32,
                            GameId = 4,
                            IsDeleted = false,
                            Path = "/img/Games/Little Witch Nobeta/71zb3knEnaL._AC_SL1500_.jpg"
                        },
                        new
                        {
                            Id = 33,
                            GameId = 4,
                            IsDeleted = false,
                            Path = "/img/Games/Little Witch Nobeta/91f4gT-pGyL._AC_SL1500_.jpg"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Ecchi"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Martial Arts"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "School Life"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            Name = "Isekai"
                        });
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 18, 22, 5, 7, 418, DateTimeKind.Local).AddTicks(3222));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9a4d407-7518-4aea-a72d-b94c7e389b70"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "727ceb76-c832-48b7-a459-3e7fff1ffafd",
                            Email = "testuser123@gmail.com",
                            EmailConfirmed = false,
                            JoinTime = new DateTime(2024, 3, 18, 22, 5, 7, 416, DateTimeKind.Local).AddTicks(5984),
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER123@GMAIL.COM",
                            NormalizedUserName = "TEST USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEA0awQKjx1kYCEl/5jJvI4FlngWjSwUo0aB4O6YJUaIj5HHX5stI2PRQ71/wfiNVOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0173f73f-fc7c-45e2-8efd-5b1876502c88",
                            TwoFactorEnabled = false,
                            UserName = "Test User"
                        },
                        new
                        {
                            Id = new Guid("ee8ddd02-ce94-4f77-8608-819b08dbbb32"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0aea9579-ee61-4ba2-a31a-22a483b9b2b5",
                            Email = "admin123@gmail.com",
                            EmailConfirmed = false,
                            JoinTime = new DateTime(2024, 3, 18, 22, 5, 7, 416, DateTimeKind.Local).AddTicks(5994),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN123@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/0L3akmBC1d5p+PoNk7a1cQV+nPGch3clKTq0u9CozbJYJkJ+QHiSxs530Fy67hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9367f2a-b93d-4cc3-b20f-0684a843891a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Book", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.BookType", "BookType")
                        .WithMany("Books")
                        .HasForeignKey("BookTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookType");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.BooksTags", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Book", "Book")
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Tag", "Tag")
                        .WithMany("BookTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.FavoriteProducts", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Book", "Book")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.GamesGenres", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("Orders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Picture", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Book", "Book")
                        .WithMany("Pictures")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.Game", "Game")
                        .WithMany("Pictures")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Book");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AnimeStockWebProject.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Book", b =>
                {
                    b.Navigation("BookTags");

                    b.Navigation("Comments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.BookType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("GameGenres");

                    b.Navigation("Orders");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.Tag", b =>
                {
                    b.Navigation("BookTags");
                });

            modelBuilder.Entity("AnimeStockWebProject.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
