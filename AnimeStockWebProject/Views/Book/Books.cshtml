@model BookQueryViewModel

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<link rel="stylesheet" href="~/AnimeStockWebProject.styles.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/Reset.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/BookStyles/Books.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/BookStyles/Responsive/BooksResponsive.css" asp-append-version="true" />
<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<div class="items-container">
    
    <section class="sidebar">
        
        <form method="get" class="search-form" autocomplete="off">
            <div class="search-input-container">
                <input type="text" placeholder="search" name="searchQuery" asp-for="@Model.SearchQuery" />
                <button type="submit" class="search-button"><i class="fa-solid fa-search"></i></button>
            </div>
            <div id="searchSidebarToggle" class="sidebar-toggle">
                <div class="bar"></div>
                <div class="bar"></div>
                <div class="bar"></div>
            </div>

            @if (Model.SelectedTagIds.Any())
            {
                @foreach (int tagId in Model.SelectedTagIds)
                {
                    <input type="hidden" name="SelectedTagIds" value="@tagId" />
                }
            }
            @if (Model.SelectedBookTypeIds.Any())
            {
                @foreach (int typeId in Model.SelectedBookTypeIds)
                {
                    <input type="hidden" name="SelectedBookTypeIds" value="@typeId" />
                }
            }
            <input type="hidden" name="PrintType" value="@Model.PrintType" />

            <input type="hidden" name="bookSortEnum" value="@Model.BookSortEnum" />
        </form>

        <form method="get" class="sort-form">
            <h2>Sort By</h2>

            <select class="sort" name="bookSortEnum" asp-for="@Model.BookSortEnum" onchange="this.form.submit()">
                <option value="0">Order by newest</option>
                <option value="1">Order by oldest</option>
                <option value="2">Order by A-Z</option>
                <option value="3">Order by Z-A</option>
            </select>

            @if (Model.SelectedTagIds.Any())
            {
                @foreach (int tagId in Model.SelectedTagIds)
                {
                    <input type="hidden" name="SelectedTagIds" value="@tagId" />
                }
            }
            @if (Model.SelectedBookTypeIds.Any())
            {
                @foreach (int typeId in Model.SelectedBookTypeIds)
                {
                    <input type="hidden" name="SelectedBookTypeIds" value="@typeId" />
                }
            }
            <input type="hidden" name="PrintType" value="@Model.PrintType" />

            <input type="hidden" name="searchQuery" value="@Model.SearchQuery" />
        </form>

        <form method="get" class="filter-form">
            <h2 class="filter-title">
                Filter tags
            </h2>

            <div class="tags-container">
                @foreach (TagViewModel tag in Model.BookTags)
                {
                    <div class="tag-container">
                        <label class="custom-checkbox">
                            <input type="checkbox" value="@tag.Id" name="SelectedTagIds" onchange="this.form.submit()" @(Model.SelectedTagIds.Contains(tag.Id) ? "checked" : "") />
                            <span class="checkmark-box"></span>
                            <span class="checkmark-symbol"></span>
                            @tag.Name
                        </label>
                    </div>
                }
            </div>

            @if (Model.SelectedBookTypeIds.Any())
            {
                @foreach (int typeId in Model.SelectedBookTypeIds)
                {
                    <input type="hidden" name="SelectedBookTypeIds" value="@typeId" />
                }
            }
            <input type="hidden" name="bookSortEnum" value="@Model.BookSortEnum" />

            <input type="hidden" name="PrintType" value="@Model.PrintType" />

            <input type="hidden" name="searchQuery" value="@Model.SearchQuery" />
        </form>

        <form method="get" class="print-type-form">
            <h2 class="print-type-title">
                Print Types
            </h2>

            <div class="print-type-container">
                <label class="custom-radio">
                    <input type="radio" class="sort-option" name="PrintType" value="0" @(Model.PrintType == PrintTypeEnum.Default ? "checked" : "") onchange="this.form.submit()">
                    <span class="checkmark"></span>
                    All Series
                </label>
                <label class="custom-radio">
                    <input type="radio" class="sort-option" name="PrintType" value="2" @(Model.PrintType == PrintTypeEnum.Digital ? "checked" : "") onchange="this.form.submit()">
                    <span class="checkmark"></span>
                    Digital
                </label>
                <label class="custom-radio">
                    <input type="radio" class="sort-option" name="PrintType" value="1" @(Model.PrintType == PrintTypeEnum.Phisycal ? "checked" : "") onchange="this.form.submit()">
                    <span class="checkmark"></span>
                    Phisycal
                </label>
            </div>

            @if (Model.SelectedBookTypeIds.Any())
            {
                @foreach (int typeId in Model.SelectedBookTypeIds)
                {
                    <input type="hidden" name="SelectedBookTypeIds" value="@typeId" />
                }
            }

            @if (Model.SelectedTagIds.Any())
            {
                @foreach (int tagId in Model.SelectedTagIds)
                {
                    <input type="hidden" name="SelectedTagIds" value="@tagId" />
                }
            }
            <input type="hidden" name="bookSortEnum" value="@Model.BookSortEnum" />

            <input type="hidden" name="searchQuery" value="@Model.SearchQuery" />
        </form>

        <form method="get" class="book-type-form">
            <h2 class="book-type-title">
                Book Types
            </h2>

            <div class="book-type-container">
                @foreach (BookTypeViewModel bookType in Model.BookTypes)
                {
                    <div class="book-type-input-container">

                        <label class="custom-checkbox">
                            <input type="checkbox" class="checkBox" value="@bookType.Id" name="SelectedBookTypeIds" onchange="this.form.submit()" @(Model.SelectedBookTypeIds.Contains(bookType.Id) ? "checked" : "") />
                            <span class="checkmark-box"></span>
                            <span class="checkmark-symbol"></span>
                            @bookType.Name
                        </label>
                    </div>
                }
            </div>


            @if (Model.SelectedTagIds.Any())
            {
                @foreach (int tagId in Model.SelectedTagIds)
                {
                    <input type="hidden" name="SelectedTagIds" value="@tagId" />
                }
            }
            <input type="hidden" name="bookSortEnum" value="@Model.BookSortEnum" />

            <input type="hidden" name="PrintType" value="@Model.PrintType" />

            <input type="hidden" name="searchQuery" value="@Model.SearchQuery" />
        </form>
    </section>

   

    <section class="main-page-content">
        <div class="pagination-container top">
            <div id="sidebarToggle" class="sidebar-toggle">
                <div class="bar"></div>
                <div class="bar"></div>
                <div class="bar"></div>
            </div>
            @if (Model.Pager.TotalPages > 0)
            {
                <ul class="page-list">
                    @if (Model.Pager.CurrentPage > Model.Pager.StartPage)
                    {
                        <li class="page-item">
                            <a class="page-link"
                               href="@Url.Action("Books", "Book", new
                            {
                                currentPage = Model.Pager.CurrentPage - 1,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">Previous</a>
                        </li>
                    }

                    @for (int page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
                    {
                        <li class="page-item">
                            <a class="page-link @(page == Model.Pager.CurrentPage ? "active" : "")"
                               href="@Url.Action("Books", "Book", new{
                                currentPage = page,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">@(page)</a>
                        </li>
                    }

                    @if (Model.Pager.CurrentPage < Model.Pager.EndPage)
                    {
                        <li class="page-item">
                            <a class="page-link"
                               href="@Url.Action("Books", "Book", new{
                                currentPage = Model.Pager.CurrentPage + 1,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">Next</a>
                        </li>
                    }
                </ul>
            }
        </div>


        @if (!Model.BookViewModels.Any())
        {
            <p class="not-found">No matches found</p>
        }

        <section class="book-cards">
            <partial name="_AllBooks" model="@Model.BookViewModels" />
        </section>

        <div class="pagination-container bottom">
            @if (Model.Pager.TotalPages > 0)
            {
                <ul class="page-list">
                    @if (Model.Pager.CurrentPage > Model.Pager.StartPage)
                    {
                        <li class="page-item">
                            <a class="page-link"
                               href="@Url.Action("Books", "Book", new
                            {
                                currentPage = Model.Pager.CurrentPage - 1,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">Previous</a>
                        </li>
                    }

                    @for (int page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
                    {
                        <li class="page-item">
                            <a class="page-link @(page == Model.Pager.CurrentPage ? "active" : "")"
                               href="@Url.Action("Books", "Book", new{
                                currentPage = page,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">@(page)</a>
                        </li>
                    }

                    @if (Model.Pager.CurrentPage < Model.Pager.EndPage)
                    {
                        <li class="page-item">
                            <a class="page-link"
                               href="@Url.Action("Books", "Book", new{
                                currentPage = Model.Pager.CurrentPage + 1,
                                bookSortEnum = (int)Model.BookSortEnum,
                                selectedTagIds = Model.SelectedTagIds,
                                printType = (int)Model.PrintType,
                                selectedBookTypeIds = Model.SelectedBookTypeIds,
                                searchQuery = Model.SearchQuery
                            })">Next</a>
                        </li>
                    }
                </ul>
            }
        </div>
    </section>
</div>

<script>
    const csrfToken = '@GetAntiXsrfRequestToken()';

    const sidebarToggle = document.getElementById('sidebarToggle');
    const sidebar = document.querySelector('.sidebar');
    const body = document.querySelector('body');
    sidebarToggle.addEventListener('click', function () {
        sidebar.classList.toggle('visible');
        sidebarToggle.classList.toggle('active');
        if (sidebar.classList.contains('visible')) {
            if (window.innerWidth < 768) {
                body.style.overflow = 'hidden'; // Disable scrolling
            }
        } else {
            body.style.overflow = ''; // Enable scrolling
        }
    });

    const searchSidebarToggle = document.getElementById('searchSidebarToggle');

    searchSidebarToggle.addEventListener('click', function () {
        sidebar.classList.toggle('visible');
        sidebarToggle.classList.toggle('active');
        if (sidebar.classList.contains('visible')) {
            if (window.innerWidth < 768) {
                body.style.overflow = 'hidden'; // Disable scrolling
            }
        } else {
            body.style.overflow = ''; // Enable scrolling
        }
    });

</script>

<script src="~/js/Books/Book.js"></script>
<script src="~/js/Modal.js"></script>